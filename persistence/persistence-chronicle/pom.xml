<?xml version="1.0" encoding="UTF-8"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>io.mercury</groupId>
		<artifactId>persistence</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>

	<artifactId>persistence-chronicle</artifactId>
	<name>persistence-chronicle</name>

	<packaging>jar</packaging>

	<properties>
		<!-- v chronicle storage basic v -->
		<chronicle-core.version>2.21.94</chronicle-core.version>
		<chronicle-bytes.version>2.21.92</chronicle-bytes.version>
		<chronicle-threads.version>2.21.87</chronicle-threads.version>
		<chronicle-wire.version>2.21.93</chronicle-wire.version>
		<chronicle-analytics.version>2.21.2</chronicle-analytics.version>
		<!-- ^ chronicle storage basic ^ -->
		<chronicle-values.version>2.21.82</chronicle-values.version>
		<chronicle-algorithms.version>2.21.82</chronicle-algorithms.version>
		<chronicle-queue.version>5.21.94</chronicle-queue.version>
		<chronicle-map.version>3.21.86</chronicle-map.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>io.mercury</groupId>
			<artifactId>commons-config</artifactId>
		</dependency>
		<dependency>
			<groupId>io.mercury</groupId>
			<artifactId>commons-concurrent</artifactId>
		</dependency>
		<dependency>
			<groupId>io.mercury</groupId>
			<artifactId>serialization-json</artifactId>
		</dependency>

		<dependency>
			<groupId>io.mercury</groupId>
			<artifactId>serialization-avro</artifactId>
			<version>${project.version}</version>
		</dependency>

		<!-- ####### chronicle-core ####### -->
		<!-- Low level access to native memory, JVM and OS. -->
		<dependency>
			<groupId>net.openhft</groupId>
			<artifactId>chronicle-core</artifactId>
			<version>${chronicle-core.version}</version>
		</dependency>

		<!-- ####### chronicle-bytes ####### -->
		<!-- Chronicle Bytes contains all the low level memory access wrappers.It 
			is built on Chronicle Core’s direct memory and OS system call access. Chronicle 
			Bytes has a similar purpose to Java NIO’s ByteBuffer with some extensions. -->
		<dependency>
			<groupId>net.openhft</groupId>
			<artifactId>chronicle-bytes</artifactId>
			<version>${chronicle-bytes.version}</version>
		</dependency>

		<!-- ####### chronicle-threads ####### -->
		<!-- This library provide a high performance thread pool. This thread pool 
			is design to share blocking, monitoring and busy waiting threads. Busy waiting 
			tasks can be prioritised for HIGH, MEDIUM, DAEMON (low priority) as well 
			as TIMER (fixed rate events) tasks in a single thread without creating garbage. -->
		<dependency>
			<groupId>net.openhft</groupId>
			<artifactId>chronicle-threads</artifactId>
			<version>${chronicle-threads.version}</version>
		</dependency>

		<!-- ####### chronicle-wire ####### -->
		<!-- A Java serialization Library that supports multiple formats. -->
		<dependency>
			<groupId>net.openhft</groupId>
			<artifactId>chronicle-wire</artifactId>
			<version>${chronicle-wire.version}</version>
		</dependency>

		<!-- Chronicle-Analytics -->
		<dependency>
			<groupId>net.openhft</groupId>
			<artifactId>chronicle-analytics</artifactId>
			<version>${chronicle-analytics.version}</version>
		</dependency>

		<!-- ####### chronicle-values ####### -->
		<!-- Generation of constantly-sized flyweight accessors to Chronicle Bytes 
			and simple bean-style on-heap implementations from interfaces. Interfaces, 
			that could be processed by Chronicle-Values generation, are called value 
			interfaces. -->
		<dependency>
			<groupId>net.openhft</groupId>
			<artifactId>chronicle-values</artifactId>
			<version>${chronicle-values.version}</version>
		</dependency>

		<!-- ####### chronicle-algorithms ####### -->
		<!-- Zero allocation, efficient algorithms for 1)hashing, 2)bit set operations, 
			3)access the raw bytes of an data type, 4)off heap locking -->
		<dependency>
			<groupId>net.openhft</groupId>
			<artifactId>chronicle-algorithms</artifactId>
			<version>${chronicle-algorithms.version}</version>
		</dependency>

		<!-- ######################################################### -->
		<!-- chronicle-queue Java library for persisted low latency messaging, 
			Microsecond messaging that stores everything to disk -->
		<dependency>
			<groupId>net.openhft</groupId>
			<artifactId>chronicle-queue</artifactId>
			<version>${chronicle-queue.version}</version>
		</dependency>

		<!-- ######################################################### -->
		<!-- chronicle-map off-heap and high performance map framework, Replicate 
			your Key Value Store across your network, with consistency, persistence and 
			performance. -->
		<dependency>
			<groupId>net.openhft</groupId>
			<artifactId>chronicle-map</artifactId>
			<version>${chronicle-map.version}</version>
			<exclusions>
				<exclusion>
					<groupId>com.intellij</groupId>
					<artifactId>annotations</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>jcl-over-slf4j</artifactId>
				</exclusion>
				<!-- java 11 use this exclusion -->
				<!-- <exclusion> <groupId>com.sun.java</groupId> <artifactId>tools</artifactId> 
					</exclusion> -->
			</exclusions>
		</dependency>

		<!-- A set of annotations used for code inspection support and code documentation. -->
		<dependency>
			<groupId>org.jetbrains</groupId>
			<artifactId>annotations</artifactId>
		</dependency>

		<dependency>
			<groupId>net.openhft</groupId>
			<artifactId>jlbh</artifactId>
			<version>1.19.41</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

</project>
